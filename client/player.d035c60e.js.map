{"version":3,"file":"player.d035c60e.js","sources":["../../../src/routes/mtg/player.svelte"],"sourcesContent":["<script>\n    import { createEventDispatcher } from \"svelte\";\n    const dispatch = createEventDispatcher();\n    \n    import Token from \"./token.svelte\"\n    import NewToken from \"./addToken.svelte\"\n    import Tablink from \"./tabLink.svelte\" \n    export let name;\n    export let life;\n    const addLife = () => (life += 1)\n    const subLife = () => (life -= 1)\n    const onDelete = () => dispatch(\"removeplayer\", name);\n    \n    var rand = () => {\n        return Math.random().toString(36).substr(2); // remove `0.`\n    };\n\n    var id_gen = () => {\n        return rand() + rand(); // to make it longer\n    };\n\n    let tokens = [{\n        name:\"TOKEN TABS: \",\n        color:\"\",\n        power:null,\n        tough:null,\n        ability:\"None\",\n        tapped: false,\n        id: 0\n\n    }];\n    let token = tokens[0];\n\n    const addToken = e => {\n        console.log(e.detail[0]);\n        for(var i = 0; i < e.detail[1]; i++){\n            var newToken = e.detail[0];\n            tokens = [...tokens, {name:newToken.name,\n                                  color:newToken.color,\n                                  power:newToken.power,\n                                  tough:newToken.tough,\n                                  ability:newToken.ability,\n                                  tapped:newToken.tapped,\n                                  id:id_gen()}]\n            console.log(tokens);\n        };\n    };\n    const removeToken = e => { \n        tokens = tokens.filter (token => token.id !== e.detail);\n    };\n    const openToken = e => {\n        token = tokens.filter(t => t.id === e.detail)[0];\n    };\n    const updateToken = e => {\n        var itterate = tokens.length;\n        token = e.detail;\n        for(var i = 0; i < itterate; i++){\n            for(var key in tokens[i]){\n                if (tokens[i][key] === token.id){\n                    console.log(token);\n                    tokens.splice(i,1,token);//should start at index +1\n                    console.log(tokens);\n                    break;\n                };\n            };\n        };\n    };\n    // Staging for game saves\n    export let savePlayer = { \n        e_name: name,\n        e_life: life,\n        e_tokens: tokens,\n        e_matchID: id_gen()\n    }\n</script>\n\n<div class=\"card\">\n    <h1>{name}</h1>\n    <h3>{life}</h3>\n    <button class=\"btn btn-success\" on:click={addLife}>+1</button>\n    {#if life > 0}\n        <button class=\"btn btn-dark\" on:click={subLife}>-1</button>\n    {/if}\n    <button class=\"btn btn-danger btn-sm\" on:click={onDelete}>X</button> \n    <div class=\"container\">\n        <NewToken on:addtoken={addToken} />\n    </div>\n    {#if tokens.length < 1}\n        <h2>No Tokens Loaded</h2>\n    {:else}\n\n        <div class=\"tabs\">\n            {#each tokens as temp_token}\n                <Tablink\n                    name={temp_token.name}\n                    color={temp_token.color}\n                    id={temp_token.id}\n                    on:opentoken={openToken}\n                />\n            {/each}\n        </div>\n        {#if (tokens.filter(t => t.id === token.id)[0] !== undefined) && (token.power != null)}\n            <div class=\"tabcontent\">\n                <Token\n                    name={token.name}\n                    color={token.color}\n                    power={token.power}\n                    tough={token.tough}\n                    ability={token.ability}\n                    tapped={token.tapped}\n                    id={token.id}\n                    on:removetoken={removeToken}\n                    on:update={updateToken}\n                />\n            </div>\n        {/if}\n    {/if}\n</div>\n"],"names":["subLife","tokens","length","undefined","filter","ctx","token","power","temp_token","name","color","id","openToken","tough","ability","tapped","removeToken","updateToken","life","addToken","addLife","onDelete","dispatch","createEventDispatcher","rand","Math","random","toString","substr","id_gen","savePlayer","e_name","e_life","e_tokens","e_matchID","e","console","log","detail","i","newToken","t","itterate","key","splice"],"mappings":"ilBAiF+CA,uFAW5BC,oBAALC,6EAS6CC,MAA7CF,OAAOG,OAAOC,QAAwB,IAAqC,QAAfC,MAAMC,kDATlEL,2GAAAA,0IAAAA,uFAAKD,uBAALC,qHAAAA,WAAAA,0BAS6CC,MAA7CF,OAAOG,OAAOC,QAAwB,IAAqC,QAAfC,MAAMC,kIATlEL,yEAAAA,2TAEYM,WAAWC,aACVD,WAAWE,WACdF,WAAWG,iCACDC,sHAHRJ,WAAWC,2BACVD,WAAWE,yBACdF,WAAWG,2IAQTL,MAAMG,aACLH,MAAMI,cACNJ,MAAMC,cACND,MAAMO,gBACJP,MAAMQ,iBACPR,MAAMS,YACVT,MAAMK,mCACMK,8BACLC,kPARLX,MAAMG,0BACLH,MAAMI,2BACNJ,MAAMC,2BACND,MAAMO,6BACJP,MAAMQ,8BACPR,MAAMS,yBACVT,MAAMK,kKA9BrBO,KAAO,uCAKeC,kDAEtBlB,OAAOC,OAAS,mEAVhBO,4BACAS,yNADAT,wEACAS,2dACqCE,uBAIMC,8MAN3CZ,wBACAS,QAEAA,KAAO,gTA9EZ,MAAMI,EAAWC,IAKV,SAAId,EAAIS,KACJA,KAKX,IAAIM,EAAO,IACAC,KAAKC,SAASC,SAAS,IAAIC,OAAO,GAGzCC,EAAS,IACFL,IAASA,IAGpB,IAAIvB,EAAS,CAAC,CACVQ,KAAK,eACLC,MAAM,GACNH,MAAM,KACNM,MAAM,KACNC,QAAQ,OACRC,QAAQ,EACRJ,GAAI,IAGJL,EAAQL,EAAO,GAqCnB,eAAW6B,EAAa,CACpBC,OAAQtB,EACRuB,OAAQd,EACRe,SAAUhC,EACViC,UAAWL,mKA/DC,aAAOX,GAAQ,gCACf,aAAOA,GAAQ,iCACd,IAAMI,EAAS,eAAgBb,6BAsB/B0B,IACbC,QAAQC,IAAIF,EAAEG,OAAO,IACrB,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAEG,OAAO,GAAIC,IAAI,CAChC,IAAIC,EAAWL,EAAEG,OAAO,cACxBrC,EAAS,IAAIA,EAAQ,CAACQ,KAAK+B,EAAS/B,KACdC,MAAM8B,EAAS9B,MACfH,MAAMiC,EAASjC,MACfM,MAAM2B,EAAS3B,MACfC,QAAQ0B,EAAS1B,QACjBC,OAAOyB,EAASzB,OAChBJ,GAAGkB,OACzBO,QAAQC,IAAIpC,iBAGAkC,eAChBlC,EAASA,EAAOG,OAAQE,GAASA,EAAMK,KAAOwB,EAAEG,oBAElCH,cACd7B,EAAQL,EAAOG,OAAOqC,GAAKA,EAAE9B,KAAOwB,EAAEG,QAAQ,iBAE9BH,IAChB,IAAIO,EAAWzC,EAAOC,iBACtBI,EAAQ6B,EAAEG,QACV,IAAI,IAAIC,EAAI,EAAGA,EAAIG,EAAUH,IACzB,IAAI,IAAII,KAAO1C,EAAOsC,GAClB,GAAItC,EAAOsC,GAAGI,KAASrC,EAAMK,GAAG,CAC5ByB,QAAQC,IAAI/B,GACZL,EAAO2C,OAAOL,EAAE,EAAEjC,GAClB8B,QAAQC,IAAIpC,GACZ"}